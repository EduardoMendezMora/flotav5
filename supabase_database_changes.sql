-- =====================================================
-- CAMBIOS EN BASE DE DATOS PARA SUPABASE - FLOTA v.3
-- =====================================================
-- Ejecutar en el SQL Editor de Supabase

-- =====================================================
-- 1. CREAR NUEVAS TABLAS DE CATÁLOGOS
-- =====================================================

-- Tabla de carrocerías
CREATE TABLE IF NOT EXISTS public.carrocerias (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre text NOT NULL UNIQUE
);

-- Tabla de colores
CREATE TABLE IF NOT EXISTS public.colores (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre text NOT NULL UNIQUE
);

-- Tabla de combustibles
CREATE TABLE IF NOT EXISTS public.combustibles (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre text NOT NULL UNIQUE
);

-- Tabla de transmisiones
CREATE TABLE IF NOT EXISTS public.transmisiones (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre text NOT NULL UNIQUE
);

-- Tabla de tracciones
CREATE TABLE IF NOT EXISTS public.tracciones (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre text NOT NULL UNIQUE
);

-- Tabla de estados actuales
CREATE TABLE IF NOT EXISTS public.estados_actuales (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre text NOT NULL UNIQUE
);

-- Tabla de vendedores
CREATE TABLE IF NOT EXISTS public.vendedores (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre text NOT NULL,
    telefono text,
    email text
);

-- Tabla de grupos de WhatsApp
CREATE TABLE IF NOT EXISTS public.whatsapp_grupos (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre text,
    group_id text NOT NULL UNIQUE
);

-- Tabla de apoderados
CREATE TABLE IF NOT EXISTS public.apoderados (
    id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    arrendadora_id bigint NOT NULL,
    nombre text NOT NULL,
    identificacion text UNIQUE,
    FOREIGN KEY (arrendadora_id) REFERENCES public.arrendadoras(id)
);

-- =====================================================
-- 2. MODIFICAR TABLA ARRENDADORAS
-- =====================================================

-- Agregar campos faltantes a arrendadoras
ALTER TABLE public.arrendadoras 
ADD COLUMN IF NOT EXISTS apoderado text,
ADD COLUMN IF NOT EXISTS cedula_apoderado text;

-- =====================================================
-- 3. MODIFICAR TABLA VEHICULOS
-- =====================================================

-- Agregar nuevos campos a la tabla vehiculos
ALTER TABLE public.vehiculos 
ADD COLUMN IF NOT EXISTS estatus text,
ADD COLUMN IF NOT EXISTS ubicacion text,
ADD COLUMN IF NOT EXISTS renta_semanal numeric,
ADD COLUMN IF NOT EXISTS plazo_semanas smallint,
ADD COLUMN IF NOT EXISTS cliente_actual text,
ADD COLUMN IF NOT EXISTS valor_adquisicion numeric,
ADD COLUMN IF NOT EXISTS fecha_adquisicion date,
ADD COLUMN IF NOT EXISTS grupo_whatsapp text,
ADD COLUMN IF NOT EXISTS carroceria_id bigint,
ADD COLUMN IF NOT EXISTS color_id bigint,
ADD COLUMN IF NOT EXISTS combustible_id bigint,
ADD COLUMN IF NOT EXISTS transmision_id bigint,
ADD COLUMN IF NOT EXISTS traccion_id bigint,
ADD COLUMN IF NOT EXISTS apoderado_id bigint,
ADD COLUMN IF NOT EXISTS vendedor_id bigint,
ADD COLUMN IF NOT EXISTS whatsapp_grupo_id bigint,
ADD COLUMN IF NOT EXISTS estado_actual_id bigint;

-- Agregar foreign keys (con manejo de errores)
DO $$
BEGIN
    -- Carrocería
    IF NOT EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_name = 'vehiculos_carroceria_id_fkey') THEN
        ALTER TABLE public.vehiculos ADD CONSTRAINT vehiculos_carroceria_id_fkey 
            FOREIGN KEY (carroceria_id) REFERENCES public.carrocerias(id);
    END IF;
    
    -- Color
    IF NOT EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_name = 'vehiculos_color_id_fkey') THEN
        ALTER TABLE public.vehiculos ADD CONSTRAINT vehiculos_color_id_fkey 
            FOREIGN KEY (color_id) REFERENCES public.colores(id);
    END IF;
    
    -- Combustible
    IF NOT EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_name = 'vehiculos_combustible_id_fkey') THEN
        ALTER TABLE public.vehiculos ADD CONSTRAINT vehiculos_combustible_id_fkey 
            FOREIGN KEY (combustible_id) REFERENCES public.combustibles(id);
    END IF;
    
    -- Transmisión
    IF NOT EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_name = 'vehiculos_transmision_id_fkey') THEN
        ALTER TABLE public.vehiculos ADD CONSTRAINT vehiculos_transmision_id_fkey 
            FOREIGN KEY (transmision_id) REFERENCES public.transmisiones(id);
    END IF;
    
    -- Tracción
    IF NOT EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_name = 'vehiculos_traccion_id_fkey') THEN
        ALTER TABLE public.vehiculos ADD CONSTRAINT vehiculos_traccion_id_fkey 
            FOREIGN KEY (traccion_id) REFERENCES public.tracciones(id);
    END IF;
    
    -- Apoderado
    IF NOT EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_name = 'vehiculos_apoderado_id_fkey') THEN
        ALTER TABLE public.vehiculos ADD CONSTRAINT vehiculos_apoderado_id_fkey 
            FOREIGN KEY (apoderado_id) REFERENCES public.apoderados(id);
    END IF;
    
    -- Vendedor
    IF NOT EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_name = 'vehiculos_vendedor_id_fkey') THEN
        ALTER TABLE public.vehiculos ADD CONSTRAINT vehiculos_vendedor_id_fkey 
            FOREIGN KEY (vendedor_id) REFERENCES public.vendedores(id);
    END IF;
    
    -- WhatsApp grupo
    IF NOT EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_name = 'vehiculos_whatsapp_grupo_id_fkey') THEN
        ALTER TABLE public.vehiculos ADD CONSTRAINT vehiculos_whatsapp_grupo_id_fkey 
            FOREIGN KEY (whatsapp_grupo_id) REFERENCES public.whatsapp_grupos(id);
    END IF;
    
    -- Estado actual
    IF NOT EXISTS (SELECT 1 FROM information_schema.table_constraints WHERE constraint_name = 'vehiculos_estado_actual_id_fkey') THEN
        ALTER TABLE public.vehiculos ADD CONSTRAINT vehiculos_estado_actual_id_fkey 
            FOREIGN KEY (estado_actual_id) REFERENCES public.estados_actuales(id);
    END IF;
END $$;

-- =====================================================
-- 4. INSERTAR DATOS INICIALES EN CATÁLOGOS
-- =====================================================

-- Insertar colores básicos
INSERT INTO public.colores (nombre) VALUES 
    ('Blanco'), ('Negro'), ('Gris'), ('Plateado'), ('Azul'), 
    ('Rojo'), ('Verde'), ('Amarillo'), ('Naranja'), ('Marrón')
ON CONFLICT (nombre) DO NOTHING;

-- Insertar tipos de carrocería
INSERT INTO public.carrocerias (nombre) VALUES 
    ('Sedán'), ('SUV'), ('Pickup'), ('Van'), ('Hatchback'), 
    ('Wagon'), ('Coupe'), ('Convertible'), ('Truck'), ('Bus')
ON CONFLICT (nombre) DO NOTHING;

-- Insertar tipos de combustible
INSERT INTO public.combustibles (nombre) VALUES 
    ('Gasolina'), ('Diesel'), ('Eléctrico'), ('Híbrido'), ('Gas Natural'),
    ('Etanol'), ('Biodiesel'), ('Hidrógeno')
ON CONFLICT (nombre) DO NOTHING;

-- Insertar tipos de transmisión
INSERT INTO public.transmisiones (nombre) VALUES 
    ('Manual'), ('Automática'), ('CVT'), ('Semi-automática'), ('Tiptronic')
ON CONFLICT (nombre) DO NOTHING;

-- Insertar tipos de tracción
INSERT INTO public.tracciones (nombre) VALUES 
    ('Delantera'), ('Trasera'), ('4x4'), ('AWD'), ('4WD')
ON CONFLICT (nombre) DO NOTHING;

-- Insertar estados actuales básicos
INSERT INTO public.estados_actuales (nombre) VALUES 
    ('Disponible'), ('En Renta'), ('Mantenimiento'), ('Fuera de Servicio'),
    ('Reservado'), ('En Tránsito'), ('Vendido')
ON CONFLICT (nombre) DO NOTHING;

-- =====================================================
-- 5. CREAR ÍNDICES PARA OPTIMIZAR RENDIMIENTO
-- =====================================================

-- Índices para búsquedas frecuentes
CREATE INDEX IF NOT EXISTS idx_vehiculos_placa ON public.vehiculos(placa);
CREATE INDEX IF NOT EXISTS idx_vehiculos_vin ON public.vehiculos(vin);
CREATE INDEX IF NOT EXISTS idx_vehiculos_estatus ON public.vehiculos(estatus);
CREATE INDEX IF NOT EXISTS idx_vehiculos_arrendadora ON public.vehiculos(arrendadora_id);
CREATE INDEX IF NOT EXISTS idx_vehiculos_estado_inventario ON public.vehiculos(estado_inventario_id);

-- =====================================================
-- 6. VERIFICACIÓN FINAL
-- =====================================================

-- Verificar que todas las tablas se crearon correctamente
SELECT 'Tablas creadas:' as status, table_name 
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name IN (
    'carrocerias', 'colores', 'combustibles', 'transmisiones', 
    'tracciones', 'estados_actuales', 'vendedores', 'whatsapp_grupos', 'apoderados'
)
ORDER BY table_name;

-- Verificar estructura de la tabla vehiculos
SELECT column_name, data_type, is_nullable
FROM information_schema.columns 
WHERE table_schema = 'public' 
AND table_name = 'vehiculos'
ORDER BY ordinal_position;

-- =====================================================
-- 9. SISTEMA COMPLETO DE PESTAÑAS PARA VEHÍCULOS
-- =====================================================

-- =====================================================
-- 9.1 GALERÍA DE FOTOS (Hasta 30 fotos por vehículo)
-- =====================================================

CREATE TABLE IF NOT EXISTS public.vehiculo_fotos (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    vehiculo_id uuid NOT NULL REFERENCES public.vehiculos(id) ON DELETE CASCADE,
    nombre_archivo text NOT NULL,
    url_archivo text NOT NULL,
    descripcion text,
    orden integer NOT NULL DEFAULT 0,
    fecha_subida timestamp with time zone DEFAULT now(),
    subido_por_id uuid REFERENCES auth.users(id),
    subido_por_nombre text,
    activo boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Índice para optimizar búsquedas por vehículo
CREATE INDEX IF NOT EXISTS idx_vehiculo_fotos_vehiculo_id ON public.vehiculo_fotos(vehiculo_id);
CREATE INDEX IF NOT EXISTS idx_vehiculo_fotos_orden ON public.vehiculo_fotos(orden);

-- =====================================================
-- 9.2 INSPECCIONES CON MACHOTES EDITABLES
-- =====================================================

-- Tabla de machotes de inspección
CREATE TABLE IF NOT EXISTS public.inspeccion_machotes (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    nombre text NOT NULL,
    descripcion text,
    categoria text NOT NULL, -- 'preventiva', 'correctiva', 'especial'
    activo boolean DEFAULT true,
    creado_por_id uuid REFERENCES auth.users(id),
    creado_por_nombre text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Tabla de pruebas dentro de cada machote
CREATE TABLE IF NOT EXISTS public.inspeccion_pruebas (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    machote_id uuid NOT NULL REFERENCES public.inspeccion_machotes(id) ON DELETE CASCADE,
    nombre text NOT NULL,
    descripcion text,
    tipo text NOT NULL, -- 'visual', 'medicion', 'prueba', 'documento'
    criterio_aceptacion text,
    orden integer NOT NULL DEFAULT 0,
    activo boolean DEFAULT true,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Tabla de inspecciones realizadas
CREATE TABLE IF NOT EXISTS public.vehiculo_inspecciones (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    vehiculo_id uuid NOT NULL REFERENCES public.vehiculos(id) ON DELETE CASCADE,
    machote_id uuid NOT NULL REFERENCES public.inspeccion_machotes(id),
    titulo text NOT NULL,
    descripcion text,
    fecha_inspeccion timestamp with time zone NOT NULL,
    inspector_id uuid REFERENCES auth.users(id),
    inspector_nombre text NOT NULL,
    estado text NOT NULL DEFAULT 'en_progreso', -- 'en_progreso', 'completada', 'cancelada'
    resultado_general text, -- 'aprobada', 'reprobada', 'con_observaciones'
    observaciones_generales text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Tabla de resultados de cada prueba en una inspección
CREATE TABLE IF NOT EXISTS public.inspeccion_resultados (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    inspeccion_id uuid NOT NULL REFERENCES public.vehiculo_inspecciones(id) ON DELETE CASCADE,
    prueba_id uuid NOT NULL REFERENCES public.inspeccion_pruebas(id),
    resultado text NOT NULL, -- 'aprobada', 'reprobada', 'observacion'
    observacion text,
    valor_medido text, -- Para pruebas de medición
    unidad text, -- Para pruebas de medición
    evidencia_url text, -- URL de foto o documento
    fecha_resultado timestamp with time zone DEFAULT now(),
    evaluado_por_id uuid REFERENCES auth.users(id),
    evaluado_por_nombre text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Tabla de comentarios en inspecciones
CREATE TABLE IF NOT EXISTS public.inspeccion_comentarios (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    inspeccion_id uuid NOT NULL REFERENCES public.vehiculo_inspecciones(id) ON DELETE CASCADE,
    usuario_id uuid REFERENCES auth.users(id),
    usuario_nombre text NOT NULL,
    comentario text NOT NULL,
    tipo text DEFAULT 'general', -- 'general', 'prueba_especifica', 'sistema'
    prueba_id uuid REFERENCES public.inspeccion_pruebas(id), -- Si es comentario de prueba específica
    created_at timestamp with time zone DEFAULT now()
);

-- Índices para inspecciones
CREATE INDEX IF NOT EXISTS idx_vehiculo_inspecciones_vehiculo_id ON public.vehiculo_inspecciones(vehiculo_id);
CREATE INDEX IF NOT EXISTS idx_vehiculo_inspecciones_fecha ON public.vehiculo_inspecciones(fecha_inspeccion);
CREATE INDEX IF NOT EXISTS idx_inspeccion_resultados_inspeccion_id ON public.inspeccion_resultados(inspeccion_id);

-- =====================================================
-- 9.3 BITÁCORA Y COMENTARIOS (Estilo WhatsApp)
-- =====================================================

CREATE TABLE IF NOT EXISTS public.vehiculo_bitacora (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    vehiculo_id uuid NOT NULL REFERENCES public.vehiculos(id) ON DELETE CASCADE,
    usuario_id uuid REFERENCES auth.users(id),
    usuario_nombre text NOT NULL,
    usuario_avatar text,
    mensaje text NOT NULL,
    tipo text DEFAULT 'texto', -- 'texto', 'imagen', 'documento', 'ubicacion'
    contenido_url text, -- Para imágenes, documentos, etc.
    mensaje_padre_id uuid REFERENCES public.vehiculo_bitacora(id), -- Para respuestas
    reacciones jsonb DEFAULT '{}', -- Emojis y reacciones
    leido_por jsonb DEFAULT '[]', -- Lista de usuarios que han leído
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Índices para bitácora
CREATE INDEX IF NOT EXISTS idx_vehiculo_bitacora_vehiculo_id ON public.vehiculo_bitacora(vehiculo_id);
CREATE INDEX IF NOT EXISTS idx_vehiculo_bitacora_fecha ON public.vehiculo_bitacora(created_at);
CREATE INDEX IF NOT EXISTS idx_vehiculo_bitacora_usuario ON public.vehiculo_bitacora(usuario_id);

-- =====================================================
-- 9.4 KILOMETRAJE / MILLAJE (Registros inborrables)
-- =====================================================

CREATE TABLE IF NOT EXISTS public.vehiculo_kilometraje (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    vehiculo_id uuid NOT NULL REFERENCES public.vehiculos(id) ON DELETE CASCADE,
    valor numeric NOT NULL CHECK (valor >= 0),
    unidad text NOT NULL DEFAULT 'km', -- 'km', 'mi'
    tipo_registro text NOT NULL DEFAULT 'manual', -- 'manual', 'gps', 'sistema'
    fecha_registro timestamp with time zone NOT NULL,
    usuario_id uuid REFERENCES auth.users(id),
    usuario_nombre text NOT NULL,
    observaciones text,
    evidencia_url text, -- Foto del odómetro
    created_at timestamp with time zone DEFAULT now()
);

-- Índices para kilometraje
CREATE INDEX IF NOT EXISTS idx_vehiculo_kilometraje_vehiculo_id ON public.vehiculo_kilometraje(vehiculo_id);
CREATE INDEX IF NOT EXISTS idx_vehiculo_kilometraje_fecha ON public.vehiculo_kilometraje(fecha_registro);
CREATE INDEX IF NOT EXISTS idx_vehiculo_kilometraje_valor ON public.vehiculo_kilometraje(valor);

-- =====================================================
-- 9.5 DISPOSITIVOS GPS
-- =====================================================

CREATE TABLE IF NOT EXISTS public.vehiculo_gps_dispositivos (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    vehiculo_id uuid NOT NULL REFERENCES public.vehiculos(id) ON DELETE CASCADE,
    modelo text NOT NULL,
    numero_serie text NOT NULL,
    numero_sim text NOT NULL,
    proveedor text,
    plan_datos text,
    estado text DEFAULT 'activo', -- 'activo', 'inactivo', 'mantenimiento'
    fecha_instalacion date,
    fecha_vencimiento_plan date,
    responsable_id uuid REFERENCES auth.users(id),
    responsable_nombre text,
    observaciones text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Tabla de comentarios y archivos para dispositivos GPS
CREATE TABLE IF NOT EXISTS public.gps_comentarios (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    dispositivo_id uuid NOT NULL REFERENCES public.vehiculo_gps_dispositivos(id) ON DELETE CASCADE,
    usuario_id uuid REFERENCES auth.users(id),
    usuario_nombre text NOT NULL,
    comentario text NOT NULL,
    tipo_contenido text DEFAULT 'texto', -- 'texto', 'imagen', 'documento', 'pantallazo'
    contenido_url text, -- URL del archivo adjunto
    created_at timestamp with time zone DEFAULT now()
);

-- Índices para GPS
CREATE INDEX IF NOT EXISTS idx_vehiculo_gps_dispositivos_vehiculo_id ON public.vehiculo_gps_dispositivos(vehiculo_id);
CREATE INDEX IF NOT EXISTS idx_vehiculo_gps_dispositivos_serie ON public.vehiculo_gps_dispositivos(numero_serie);
CREATE INDEX IF NOT EXISTS idx_gps_comentarios_dispositivo_id ON public.gps_comentarios(dispositivo_id);

-- =====================================================
-- 9.6 SOLICITUDES DE REPUESTOS (Sistema Kanban)
-- =====================================================

-- Tabla principal de solicitudes
CREATE TABLE IF NOT EXISTS public.solicitudes_repuestos (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    vehiculo_id uuid NOT NULL REFERENCES public.vehiculos(id) ON DELETE CASCADE,
    titulo text NOT NULL,
    nombre_repuesto text NOT NULL,
    numero_parte text,
    descripcion text,
    prioridad text DEFAULT 'media', -- 'baja', 'media', 'alta', 'urgente'
    estado text DEFAULT 'nueva', -- 'nueva', 'en_proceso', 'completada'
    categoria text, -- 'motor', 'frenos', 'suspension', 'electrico', 'otros'
    cantidad_solicitada integer DEFAULT 1,
    cantidad_aprobada integer,
    costo_estimado numeric,
    proveedor_sugerido text,
    fecha_solicitud timestamp with time zone DEFAULT now(),
    fecha_requerida date,
    fecha_aprobacion timestamp with time zone,
    fecha_completada timestamp with time zone,
    solicitante_id uuid REFERENCES auth.users(id),
    solicitante_nombre text NOT NULL,
    responsable_id uuid REFERENCES auth.users(id),
    responsable_nombre text,
    aprobador_id uuid REFERENCES auth.users(id),
    aprobador_nombre text,
    observaciones text,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now()
);

-- Tabla de comentarios en solicitudes
CREATE TABLE IF NOT EXISTS public.solicitud_comentarios (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    solicitud_id uuid NOT NULL REFERENCES public.solicitudes_repuestos(id) ON DELETE CASCADE,
    usuario_id uuid REFERENCES auth.users(id),
    usuario_nombre text NOT NULL,
    comentario text NOT NULL,
    tipo_contenido text DEFAULT 'texto', -- 'texto', 'imagen', 'documento', 'pantallazo'
    contenido_url text, -- URL del archivo adjunto
    created_at timestamp with time zone DEFAULT now()
);

-- Tabla de archivos adjuntos en solicitudes
CREATE TABLE IF NOT EXISTS public.solicitud_archivos (
    id uuid DEFAULT uuid_generate_v4() PRIMARY KEY,
    solicitud_id uuid NOT NULL REFERENCES public.solicitudes_repuestos(id) ON DELETE CASCADE,
    nombre_archivo text NOT NULL,
    url_archivo text NOT NULL,
    tipo_archivo text NOT NULL, -- 'imagen', 'documento', 'pdf', 'excel'
    descripcion text,
    subido_por_id uuid REFERENCES auth.users(id),
    subido_por_nombre text,
    created_at timestamp with time zone DEFAULT now()
);

-- Índices para solicitudes
CREATE INDEX IF NOT EXISTS idx_solicitudes_repuestos_vehiculo_id ON public.solicitudes_repuestos(vehiculo_id);
CREATE INDEX IF NOT EXISTS idx_solicitudes_repuestos_estado ON public.solicitudes_repuestos(estado);
CREATE INDEX IF NOT EXISTS idx_solicitudes_repuestos_prioridad ON public.solicitudes_repuestos(prioridad);
CREATE INDEX IF NOT EXISTS idx_solicitudes_repuestos_fecha ON public.solicitudes_repuestos(fecha_solicitud);
CREATE INDEX IF NOT EXISTS idx_solicitudes_repuestos_responsable ON public.solicitudes_repuestos(responsable_id);

-- =====================================================
-- 9.7 TRIGGERS Y FUNCIONES AUTOMÁTICAS
-- =====================================================

-- Función para generar tareas automáticamente cuando una inspección falla
CREATE OR REPLACE FUNCTION generar_tarea_inspeccion_fallida()
RETURNS TRIGGER AS $$
BEGIN
    -- Si el resultado es 'reprobada', generar tarea automáticamente
    IF NEW.resultado = 'reprobada' THEN
        INSERT INTO public.tareas (
            titulo,
            descripcion,
            vehiculo_id,
            responsable_id,
            responsable_nombre,
            prioridad,
            estado,
            tipo,
            fecha_creacion,
            fecha_limite,
            observaciones
        ) VALUES (
            'Tarea generada por inspección fallida',
            'Se requiere atención inmediata debido a resultado de inspección: ' || 
            (SELECT nombre FROM public.inspeccion_pruebas WHERE id = NEW.prueba_id),
            (SELECT vehiculo_id FROM public.vehiculo_inspecciones WHERE id = NEW.inspeccion_id),
            (SELECT inspector_id FROM public.vehiculo_inspecciones WHERE id = NEW.inspeccion_id),
            (SELECT inspector_nombre FROM public.vehiculo_inspecciones WHERE id = NEW.inspeccion_id),
            'alta',
            'pendiente',
            'inspeccion',
            now(),
            now() + interval '7 days',
            'Tarea generada automáticamente por sistema de inspecciones'
        );
    END IF;
    
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Trigger para generar tareas automáticamente
CREATE TRIGGER trigger_generar_tarea_inspeccion
    AFTER INSERT OR UPDATE ON public.inspeccion_resultados
    FOR EACH ROW
    EXECUTE FUNCTION generar_tarea_inspeccion_fallida();

-- Función para actualizar timestamp de actualización
CREATE OR REPLACE FUNCTION actualizar_timestamp()
RETURNS TRIGGER AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Triggers para actualizar timestamps
CREATE TRIGGER trigger_actualizar_vehiculo_fotos
    BEFORE UPDATE ON public.vehiculo_fotos
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_timestamp();

CREATE TRIGGER trigger_actualizar_inspeccion_machotes
    BEFORE UPDATE ON public.inspeccion_machotes
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_timestamp();

CREATE TRIGGER trigger_actualizar_inspeccion_pruebas
    BEFORE UPDATE ON public.inspeccion_pruebas
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_timestamp();

CREATE TRIGGER trigger_actualizar_vehiculo_inspecciones
    BEFORE UPDATE ON public.vehiculo_inspecciones
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_timestamp();

CREATE TRIGGER trigger_actualizar_inspeccion_resultados
    BEFORE UPDATE ON public.inspeccion_resultados
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_timestamp();

CREATE TRIGGER trigger_actualizar_vehiculo_bitacora
    BEFORE UPDATE ON public.vehiculo_bitacora
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_timestamp();

CREATE TRIGGER trigger_actualizar_vehiculo_gps_dispositivos
    BEFORE UPDATE ON public.vehiculo_gps_dispositivos
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_timestamp();

CREATE TRIGGER trigger_actualizar_solicitudes_repuestos
    BEFORE UPDATE ON public.solicitudes_repuestos
    FOR EACH ROW
    EXECUTE FUNCTION actualizar_timestamp();

-- =====================================================
-- 9.8 DATOS INICIALES PARA MACHOTES DE INSPECCIÓN
-- =====================================================

-- Insertar machotes básicos de inspección
INSERT INTO public.inspeccion_machotes (nombre, descripcion, categoria, creado_por_nombre) VALUES
    ('Inspección Preventiva Mensual', 'Inspección general mensual del vehículo', 'preventiva', 'Sistema'),
    ('Inspección Pre-Viaje', 'Inspección antes de salir a ruta', 'preventiva', 'Sistema'),
    ('Inspección Post-Viaje', 'Inspección después de regresar de ruta', 'preventiva', 'Sistema'),
    ('Inspección de Seguridad', 'Verificación de elementos de seguridad', 'correctiva', 'Sistema'),
    ('Inspección de Mantenimiento', 'Verificación post-mantenimiento', 'especial', 'Sistema')
ON CONFLICT DO NOTHING;

-- Insertar pruebas básicas para el machote de inspección preventiva mensual
INSERT INTO public.inspeccion_pruebas (machote_id, nombre, descripcion, tipo, criterio_aceptacion, orden) VALUES
    ((SELECT id FROM public.inspeccion_machotes WHERE nombre = 'Inspección Preventiva Mensual'), 'Estado de llantas', 'Verificar desgaste y presión de llantas', 'visual', 'Llantas con buen estado y presión correcta', 1),
    ((SELECT id FROM public.inspeccion_machotes WHERE nombre = 'Inspección Preventiva Mensual'), 'Nivel de aceite', 'Verificar nivel y estado del aceite del motor', 'medicion', 'Nivel entre mínimo y máximo, aceite limpio', 2),
    ((SELECT id FROM public.inspeccion_machotes WHERE nombre = 'Inspección Preventiva Mensual'), 'Estado de frenos', 'Verificar funcionamiento de frenos', 'prueba', 'Frenos responden correctamente', 3),
    ((SELECT id FROM public.inspeccion_machotes WHERE nombre = 'Inspección Preventiva Mensual'), 'Luces y señalización', 'Verificar funcionamiento de todas las luces', 'visual', 'Todas las luces funcionan correctamente', 4),
    ((SELECT id FROM public.inspeccion_machotes WHERE nombre = 'Inspección Preventiva Mensual'), 'Documentación', 'Verificar documentos del vehículo', 'documento', 'Documentos vigentes y completos', 5)
ON CONFLICT DO NOTHING;

-- =====================================================
-- 9.9 POLÍTICAS DE SEGURIDAD RLS (Row Level Security)
-- =====================================================

-- Habilitar RLS en todas las tablas nuevas
ALTER TABLE public.vehiculo_fotos ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.inspeccion_machotes ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.inspeccion_pruebas ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.vehiculo_inspecciones ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.inspeccion_resultados ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.inspeccion_comentarios ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.vehiculo_bitacora ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.vehiculo_kilometraje ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.vehiculo_gps_dispositivos ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.gps_comentarios ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.solicitudes_repuestos ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.solicitud_comentarios ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.solicitud_archivos ENABLE ROW LEVEL SECURITY;

-- =====================================================
-- 9.10 VERIFICACIÓN FINAL DEL SISTEMA
-- =====================================================

-- Verificar que todas las nuevas tablas se crearon correctamente
SELECT 'NUEVAS TABLAS CREADAS:' as status, table_name 
FROM information_schema.tables 
WHERE table_schema = 'public' 
AND table_name IN (
    'vehiculo_fotos', 'inspeccion_machotes', 'inspeccion_pruebas',
    'vehiculo_inspecciones', 'inspeccion_resultados', 'inspeccion_comentarios',
    'vehiculo_bitacora', 'vehiculo_kilometraje', 'vehiculo_gps_dispositivos',
    'gps_comentarios', 'solicitudes_repuestos', 'solicitud_comentarios',
    'solicitud_archivos'
)
ORDER BY table_name;

-- Verificar triggers creados
SELECT 
    trigger_name,
    event_manipulation,
    event_object_table,
    action_statement
FROM information_schema.triggers 
WHERE trigger_schema = 'public'
AND event_object_table IN (
    'inspeccion_resultados', 'vehiculo_fotos', 'inspeccion_machotes',
    'inspeccion_pruebas', 'vehiculo_inspecciones', 'vehiculo_bitacora',
    'vehiculo_gps_dispositivos', 'solicitudes_repuestos'
)
ORDER BY event_object_table, trigger_name;

-- Verificar funciones creadas
SELECT 
    routine_name,
    routine_type,
    data_type
FROM information_schema.routines 
WHERE routine_schema = 'public'
AND routine_name IN (
    'generar_tarea_inspeccion_fallida',
    'actualizar_timestamp'
)
ORDER BY routine_name;
